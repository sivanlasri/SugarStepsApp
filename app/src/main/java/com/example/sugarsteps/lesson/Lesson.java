package com.example.sugarsteps.lesson;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
import org.jetbrains.annotations.NotNull;

/**
 * Lesson entity in the SugarSteps application. Annotated as a Room entity and corresponds to the
 * "Lesson" table in the underlying SQLite database.
 *
 * Features:
 * - Auto-generated primary key for unique identification of lessons.
 * - Stores lesson details like name, photo, guide, descriptions, level, and video URL.
 * - Tracks whether the user has completed (check) or liked the lesson.
 *
 * @author Sivan Lasri
 * @version 5.0
 */

@Entity(tableName = "Lesson")
public class Lesson {

    /**
     * Unique identifier for each lesson.
     * Auto-generated by Room.
     */
    @PrimaryKey(autoGenerate = true)
    public int lessonId;

    /**
     * The display name of the lesson.
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "lesson_name")
    private String lessonName;

    /**
     * URL or path to the lesson's photo (used for displaying in lists).
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "lesson_photo")
    private String lessonPhoto;

    /**
     * Short description of the lesson (used in lists/previews).
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "short_description")
    private String shortDescription;

    /**
     * Lesson guide/instructions displayed in the lesson view.
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "lesson_guide")
    private String lessonGuide;


    /**
     * Level of the lesson (e.g., "Beginner", "Intermediate", "Advanced").
     * Can be {@code null} if not specified.
     */
    @ColumnInfo(name = "level")
    private String level;

    /**
     * URL or path to the lesson's video.
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "lesson_video")
    private String lessonVideo;

    /**
     * Detailed description of the lesson.
     * Cannot be {@code null}.
     */
    @NotNull
    @ColumnInfo(name = "long_description")
    private String longDescription;

    /**
     * Indicates whether the user has completed the lesson.
     * Defaults to {@code false}.
     */
    @NotNull
    @ColumnInfo(name = "done")
    private boolean check;

    /**
     * Indicates whether the user has liked the lesson.
     * Defaults to {@code false}.
     */
    @NotNull
    @ColumnInfo(name = "like")
    private boolean liked;

    /**
     * Creates a new Lesson with required fields.
     * Fields {@code check} and {@code liked} default to {@code false}.
     *
     * @param lessonName       the lesson's name (cannot be {@code null})
     * @param lessonPhoto      the URL/path to the lesson's photo (cannot be {@code null})
     * @param shortDescription short description of the lesson (cannot be {@code null})
     * @param lessonGuide      guide/instructions for the lesson (cannot be {@code null})
     * @param level            level of the lesson (optional)
     * @param lessonVideo      the URL/path to the lesson's video (cannot be {@code null})
     * @param longDescription  detailed description of the lesson (cannot be {@code null})
     */
    public Lesson(@NotNull String lessonName, @NotNull String lessonPhoto, @NotNull String shortDescription, @NotNull String lessonGuide, String level, @NotNull String lessonVideo, @NotNull String longDescription) {
        this.lessonName = lessonName;
        this.lessonPhoto = lessonPhoto;
        this.shortDescription = shortDescription;
        this.lessonGuide = lessonGuide;
        this.level = level;
        this.lessonVideo = lessonVideo;
        this.longDescription = longDescription;
        this.check = false;
        this.liked = false;
    }

    /** @return the unique lesson ID */
    public int getLessonId() {
        return lessonId;
    }

    /** @param lessonId the lesson's unique ID */
    public void setLessonId(int lessonId) {
        this.lessonId = lessonId;
    }

    /** @return the lesson's name (never {@code null}) */
    @NotNull
    public String getLessonName() {
        return lessonName;
    }

    /** @param lessonName the lesson's name (cannot be {@code null}) */
    public void setLessonName(@NotNull String lessonName) {
        this.lessonName = lessonName;
    }

    /** @return the URL/path to the lesson's photo (never {@code null}) */
    @NotNull
    public String getLessonPhoto() {
        return lessonPhoto;
    }

    /** @param lessonPhoto the URL/path to the lesson's photo (cannot be {@code null}) */
    public void setLessonPhoto(@NotNull String lessonPhoto) {
        this.lessonPhoto = lessonPhoto;
    }

    /** @return the lesson's short description (never {@code null}) */
    @NotNull
    public String getShortDescription() {
        return shortDescription;
    }

    /** @param shortDescription the short description (cannot be {@code null}) */
    public void setShortDescription(@NotNull String shortDescription) {
        this.shortDescription = shortDescription;
    }

    /** @return the lesson guide (never {@code null}) */
    @NotNull
    public String getLessonGuide() {
        return lessonGuide;
    }

    /** @param lessonGuide the lesson guide (cannot be {@code null}) */
    public void setLessonGuide(@NotNull String lessonGuide) {
        this.lessonGuide = lessonGuide;
    }

    /** @return the lesson's level, or {@code null} if not set */
    public String getLevel() {
        return level;
    }

    /** @param level the lesson's level (optional) */
    public void setLevel(String level) {
        this.level = level;
    }

    /** @return the URL/path to the lesson's video (never {@code null}) */
    @NotNull
    public String getLessonVideo() {
        return lessonVideo;
    }

    /** @param lessonVideo the URL/path to the lesson's video (cannot be {@code null}) */
    public void setLessonVideo(@NotNull String lessonVideo) {
        this.lessonVideo = lessonVideo;
    }

    /** @return the lesson's long description (never {@code null}) */
    @NotNull
    public String getLongDescription() {
        return longDescription;
    }

    /** @param longDescription the lesson's long description (cannot be {@code null}) */
    public void setLongDescription(@NotNull String longDescription) {
        this.longDescription = longDescription;
    }

    /** @return {@code true} if the user has completed the lesson */
    @NotNull
    public boolean isCheck() {
        return check;
    }

    /** @param check set {@code true} if the user has completed the lesson */
    public void setCheck(boolean check) {
        this.check = check;
    }

    /** @return {@code true} if the user has liked the lesson */
    @NotNull
    public boolean isLiked() {
        return liked;
    }

    /** @param liked set {@code true} if the user has liked the lesson */
    public void setLiked(boolean liked) {
        this.liked = liked;
    }

}
